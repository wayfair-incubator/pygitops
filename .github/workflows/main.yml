name: CI

# Triggers the workflow on push or pull request
# events, but only for the main branch
on: [push, pull_request]

env:
  PYTHON_VERSION: "3.9.1"

jobs:
  bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          test-requirements: "true"

      - name: Run bandit
        run: bandit --ini .bandit -r pygitops

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          test-requirements: "true"

      - name: Run black
        run: black --check pygitops tests

  flake8:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v2
        - uses: actions/setup-python@v2
          with:
            python-version: ${{ env.PYTHON_VERSION }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            test-requirements: "true"

        - name: Run flake8
          run: flake8 pygitops tests

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          requirements: "true"
          test-requirements: "true"

      - name: Run isort
        run: isort --recursive --check-only pygitops tests

  mypy:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v2
        - uses: actions/setup-python@v2
          with:
            python-version: ${{ env.PYTHON_VERSION }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            test-requirements: "true"

        - name: Run mypy
          run: mypy pygitops tests

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
        - name: Check out code
          uses: actions/checkout@v2
        - uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            requirements: "true"
            test-requirements: "true"

        - name: Run pytest
          run: pytest --cov-report xml:coverage-${{ matrix.python-version }}.xml --junitxml=test-results-${{ matrix.python-version }}.xml

        - name: Upload pytest test results artifact
          uses: actions/upload-artifact@v2
          with:
            name: pytest-results-${{ matrix.python-version }}
            path: test-results-${{ matrix.python-version }}.xml
          # Use always() to always run this step to publish test results when there are test failures
          if: ${{ always() }}

        - name: Upload coverage results artifact
          uses: actions/upload-artifact@v2
          with:
            name: pytest-coverage-${{ matrix.python-version }}
            path: coverage-${{ matrix.python-version }}.xml
          # Use always() to always run this step to publish test results when there are test failures
          if: ${{ always() }}

        - name: Publish coverage results to Codecov
          uses: codecov/codecov-action@v1.0.13
          with:
            file: coverage-${{ matrix.python-version }}.xml
            fail_ci_if_error: true


  build-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docs
        run: docker-compose run --rm mkdocs build --strict

      # publish dev docs
      - name: Publish (dev)
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v2
        with:
          name: docs-site
          path: site/

      # publish prod docs
      - name: Publish (prod)
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: site

